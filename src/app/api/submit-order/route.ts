import { type NextRequest, NextResponse } from 'next/server'

interface CartItem {
  product: {
    id: string
    name: string
    category: string
    price: { min: number; max: number }
  }
  selectedColor?: string
  quantity: number
  price: number
}

interface OrderData {
  phone: string
  name?: string
  address?: string
  comment?: string
  items: CartItem[]
  totalItems: number
  totalPrice: number
  timestamp: string
}

export async function POST(request: NextRequest) {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID

    if (!BOT_TOKEN || !CHAT_ID) {
      console.error('Missing Telegram environment variables')
      return NextResponse.json(
        { error: 'Server configuration error' },
        { status: 500, headers: corsHeaders }
      )
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    const orderData: OrderData = await request.json()

    if (!orderData.phone || !orderData.items || orderData.items.length === 0) {
      return NextResponse.json(
        { error: 'Phone and items are required' },
        { status: 400, headers: corsHeaders }
      )
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const itemsList = orderData.items.map(item =>
      `üì¶ ${item.product.name}\\n` +
      `   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${item.product.category}\\n` +
      `   ${item.selectedColor ? `–¶–≤–µ—Ç: ${item.selectedColor}\\n   ` : ''}` +
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\\n` +
      `   –¶–µ–Ω–∞: ${item.price.toLocaleString()} BYN`
    ).join('\\n\\n')

    const message = `üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞ MAESTRO

üë§ –ö–ª–∏–µ–Ω—Ç: ${orderData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
${orderData.address ? `üìç –ê–¥—Ä–µ—Å: ${orderData.address}` : ''}

üì¶ –¢–û–í–ê–†–´:
${itemsList}

üí∞ –ò–¢–û–ì–û: ${orderData.totalPrice.toLocaleString()} BYN
üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${orderData.totalItems} —à—Ç.

${orderData.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.comment}` : ''}

üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`

    const telegramResponse = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    })

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text()
      console.error('Telegram API error:', errorData)
      throw new Error('Failed to send message to Telegram')
    }

    // Firestore —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('Order processed successfully for Telegram:', orderData.phone)

    return NextResponse.json(
      {
        success: true,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
        orderId: `ORDER_${Date.now()}`
      },
      { status: 200, headers: corsHeaders }
    )

  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json(
      {
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      },
      { status: 500, headers: corsHeaders }
    )
  }
}

export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': 'Content-Type',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
    },
  })
}
